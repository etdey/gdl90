"""
Test GDL-90 message decoder functions.
"""

import unittest
from collections import namedtuple

from gdl90.decoder import Decoder

class DecodingResyncChecks(unittest.TestCase):
    """Test resynchronization of the parser buffer"""

    def _buffer_mismatch_message(self, expected, actual):
        return "mismatch of resulting buffer: expected=[%s], actual=[%s]" % (expected, actual)

    def test_buffer_empty(self):
        msg_decoder = Decoder()
        msg = "empty parser buffer should not resync"
        self.assertFalse(msg_decoder._resynchronizeParser(), msg=msg)
        pass

    def test_buffer_too_small(self):
        msg_decoder = Decoder()
        data = bytearray([0x7E])
        msg_decoder.addBytes(data)
        msg = "parser buffer is too small to resync"
        self.assertFalse(msg_decoder._resynchronizeParser(), msg=msg)
        msg = "parser buffer size should not have changed"
        self.assertEqual(len(msg_decoder.inputBuffer), 1, msg=msg)
        msg = "parser buffer contents should not have changed"
        self.assertEqual(msg_decoder.inputBuffer[0], 0x7E, msg=msg)

    def test_buffer_trash(self):
        msg_decoder = Decoder()
        data = bytearray([0x11, 0x22, 0x33, 0x44])
        msg_decoder.addBytes(data)
        msg = "parser should not have resynchronized"
        self.assertFalse(msg_decoder._resynchronizeParser(), msg=msg)
        msg = "parser buffer should have been emptied"
        self.assertEqual(len(msg_decoder.inputBuffer), 0, msg=msg)

    def test_buffer_final_0x7e(self):
        msg_decoder = Decoder()
        data = bytearray([0x66, 0x77, 0x88, 0x99, 0x7E])
        msg_decoder.addBytes(data)
        msg = "parser should not have resynchronized"
        self.assertFalse(msg_decoder._resynchronizeParser(), msg=msg)
        expected_buffer = bytearray([0x7E])
        msg = self._buffer_mismatch_message(expected_buffer, data)
        self.assertEqual(expected_buffer, msg_decoder.inputBuffer, msg=msg)

    def test_buffer_trash_before_msg(self):
        msg_decoder = Decoder()
        data = bytearray([0x88, 0x99, 0x7E, 0x11, 0x22])
        msg_decoder.addBytes(data)
        msg = "parser should have synchronized"
        self.assertTrue(msg_decoder._resynchronizeParser(), msg=msg)
        expected_buffer = bytearray([0x7E, 0x11, 0x22])
        msg = self._buffer_mismatch_message(expected_buffer, data)
        self.assertEqual(expected_buffer, msg_decoder.inputBuffer, msg=msg)

    def test_buffer_start_mid_msg(self):
        msg_decoder = Decoder()
        data = bytearray([0x88, 0x99, 0x7E, 0x7E, 0x11, 0x22])
        msg_decoder.addBytes(data)
        msg = "parser should have synchronized"
        self.assertTrue(msg_decoder._resynchronizeParser(), msg=msg)
        expected_buffer = bytearray([0x7E, 0x11, 0x22])
        msg = self._buffer_mismatch_message(expected_buffer, data)
        self.assertEqual(expected_buffer, msg_decoder.inputBuffer, msg=msg)


class DecodingMsgChecks(unittest.TestCase):
    """Test decoding of specific messages; input data excludes the start/stop 0x7E bytes"""

    def test_heartbeat(self):
        msg_decoder = Decoder()
        rawdata = bytearray([0x00,0x81,0x01,0x90,0x7D,0x5E,0x00,0x02,0x0C,0x1B])
        expected_msg = namedtuple('Heartbeat', 'MsgType StatusByte1 StatusByte2 TimeStamp MessageCounts')
        expected_msg._make(['Heartbeat', 0x81, 0x01, 32400, 2])
        msg = "heartbeat message failed to decode"
        result = msg_decoder._decodeMessage(rawdata)
        self.assertTrue(result, msg=msg)
        # TODO: test decoded message fields after refactor of Decoder parser

    def test_ownship(self):
        msg_decoder = Decoder()
        rawdata = bytearray([0x0a,0x01,0xBE,0xEF,0x01,0x17,0xBE,0x76,0xB5,0xAA,0xE5,0x03,0x5B,0x88,0x0E,0x10,0x00,0x5B,0x01,0x4E,0x31,0x32,0x33,0x4D,0x45,0x20,0x20,0x00,0xB3,0xE0])
        expected_msg = namedtuple('OwnshipReport', 'MsgType Status Type Address Latitude Longitude Altitude Misc NavIntegrityCat NavAccuracyCat HVelocity VVelocity TrackHeading EmitterCat CallSign Code')
        expected_msg._make(['OwnshipReport', 0, 1, 0xBEEF01, 33.39, -104.53, 348, 0b1011, 8, 8, 225, 0, 128, 1, 'N123ME', 0])
        msg = "ownship message failed to decode"
        result = msg_decoder._decodeMessage(rawdata)
        self.assertTrue(result, msg=msg)
        # TODO: test decoded message fields after refactor of Decoder parser

    def test_traffic(self):
        msg_decoder = Decoder()
        rawdata = bytearray([0x14,0x02,0xA1,0xE6,0x36,0x15,0xAD,0x3F,0xBA,0x3A,0xA9,0x07,0xB9,0x88,0x06,0x7F,0xFF,0xA8,0x01,0x4E,0x32,0x32,0x31,0x52,0x47,0x20,0x20,0x00,0x25,0x0A])
        expected_msg = namedtuple('TrafficReport', 'MsgType Status Type Address Latitude Longitude Altitude Misc NavIntegrityCat NavAccuracyCat HVelocity VVelocity TrackHeading EmitterCat CallSign Code')
        expected_msg._make(['TrafficReport', 0, 2, 10610230, 30.482919216156006, -98.11527013778687, 2075, 9, 8, 8, 103, -64, 236.25, 1, 'N221RG  ', 0])
        msg = "traffic message failed to decode"
        result = msg_decoder._decodeMessage(rawdata)
        self.assertTrue(result, msg=msg)
        # TODO: test decoded message fields after refactor of Decoder parser

    def test_ownship_geo_alt(self):
        msg_decoder = Decoder()
        rawdata = bytearray([0x0B,0x03,0x3F,0x00,0x32,0x2C,0x62])
        expected_msg = namedtuple('OwnshipGeometricAltitude', 'MsgType Altitude VerticalMetrics')
        expected_msg._make(['OwnshipGeometricAltitude', 4155, 50])
        msg = "ownship geometric altitude message failed to decode"
        result = msg_decoder._decodeMessage(rawdata)
        self.assertTrue(result, msg=msg)
        # TODO: test decoded message fields after refactor of Decoder parser

    def test_skyradar_101(self):
        msg_decoder = Decoder()
        rawdata = bytearray([0x65,0x2A,0x00,0x31,0x66,0x24,0x00,0x12,0x2F,0x00,0x00,0x04,0x7B,0x48])
        expected_msg = namedtuple('GpsTime', 'MsgType Hour Minute Waas')
        expected_msg._make(['GpsTime', 18, 47, False])
        msg = "Skyradar 101 message failed to decode"
        result = msg_decoder._decodeMessage(rawdata)
        self.assertTrue(result, msg=msg)
        # TODO: test decoded message fields after refactor of Decoder parser

    def test_uplink_data(self):
        msg_decoder = Decoder()
        rawdata = bytearray([0x07,0xFF,0xFF,0xFF,0x2B,0x80,0x51,0x75,0x13,0x00,0xBD,0xB0,0x17,0x80,0x00,0xFC,0x4A,0xD0,0x82,0xFD,0xF2,0x08,0x09,0x1A,0x23,0x04,0x2D,0x1E,0x0D,0x2B,0x08,0x01,0x1A,0x2B,0x04,0x2D,0x1E,0x0D,0x2B,0x08,0x01,0x1A,0x2B,0x15,0x14,0x05,0x1E,0x0D,0x2B,0x00,0x09,0x1A,0x2B,0x0D,0x0C,0x05,0x04,0x05,0x1E,0x0D,0x2B,0x18,0x00,0x00,0xFC,0x4A,0xD0,0x83,0x01,0x74,0x12,0x13,0x0A,0x1B,0x0A,0x0B,0x4A,0x18,0x01,0x1A,0x0B,0x02,0x03,0x02,0x0B,0x02,0x03,0x52,0x0B,0x02,0x08,0x19,0x2A,0x0B,0x52,0x03,0x0A,0x13,0x12,0x11,0x0A,0x01,0x1A,0x0B,0x32,0x03,0x12,0x23,0x0A,0x21,0x00,0x18,0x80,0x00,0xFC,0x4A,0xD0,0x82,0xFF,0xB4,0x18,0x09,0x2A,0x23,0x0E,0x15,0x1E,0x05,0x24,0x10,0x09,0x2A,0x1B,0x0C,0x16,0x05,0x26,0x04,0x1B,0x04,0x10,0x01,0x22,0x23,0x0C,0x25,0x16,0x0D,0x04,0x13,0x0C,0x08,0x09,0x1A,0x23,0x0C,0x05,0x06,0x1D,0x1E,0x05,0x2B,0x19,0x00,0x00,0xFC,0x4A,0xD0,0x83,0x06,0xBC,0x1B,0x12,0x23,0x02,0x43,0x0C,0x0B,0x04,0x05,0x04,0x05,0x0E,0x1B,0x12,0x1B,0x0A,0x43,0x04,0x0B,0x04,0x0D,0x0E,0x0D,0x1B,0x00,0x0A,0x13,0x22,0x4B,0x04,0x0D,0x1E,0x23,0x0A,0x13,0x22,0x33,0x14,0x05,0x06,0x15,0x06,0x05,0x19,0x00,0x00,0xFC,0x4A,0xD0,0x83,0x0A,0x3F,0x0A,0x01,0x03,0x12,0x0B,0x0A,0x03,0x4A,0x2B,0x02,0x13,0x12,0x03,0x0A,0x13,0x6A,0x0B,0x02,0x2B,0x12,0x03,0x12,0x03,0x2A,0x11,0x2A,0x0B,0x02,0x03,0x02,0x23,0x0A,0x03,0x42,0x08,0x11,0x0A,0x0B,0x02,0x0B,0x00,0x02,0x23,0x19,0x00,0x00,0xFC,0x4A,0xD0,0x83,0x11,0x48,0x0B,0x1A,0x11,0x02,0x03,0x12,0x0B,0x22,0x53,0x22,0x11,0x0A,0x13,0x02,0x03,0x22,0x2B,0x0C,0x1B,0x22,0x01,0x02,0x01,0x0A,0x13,0x1A,0x23,0x14,0x03,0x0C,0x1B,0x3A,0x01,0x02,0x13,0x1A,0x0B,0x24,0x0B,0x04,0x03,0x0C,0x0B,0x19,0x80,0x00,0xFC,0x4A,0xD0,0x83,0x04,0xFA,0x23,0x12,0x0B,0x22,0x33,0x14,0x06,0x0F,0x06,0x15,0x13,0x00,0x03,0x12,0x03,0x2A,0x33,0x04,0x0D,0x0E,0x0F,0x06,0x0D,0x13,0x18,0x2A,0x33,0x04,0x03,0x04,0x1E,0x0F,0x06,0x0D,0x13,0x18,0x2A,0x3B,0x0C,0x05,0x16,0x0F,0x06,0x0C,0x19,0x80,0x00,0xFC,0x4A,0xD0,0x83,0x2D,0x67,0x28,0x01,0x02,0x0B,0x2A,0x21,0x02,0x03,0x14,0x03,0x22,0x28,0x01,0x02,0x0B,0x2A,0x21,0x02,0x03,0x14,0x03,0x22,0x10,0x11,0x0A,0x0B,0x2A,0x11,0x1A,0x0C,0x05,0x2A,0x18,0x09,0x0A,0x0B,0x2A,0x11,0x12,0x03,0x0C,0x03,0x22,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x12,0x1E])
        expected_msg = namedtuple('UplinkData', 'MsgType TimeOfReception Header Data')
        expected_msg._make(['UplinkData', 16777215, bytearray(b',`\xb9u\xf8\xbc\xaa\xf0'), bytearray(b'\x17\x80\x00\xfcJ\xd0\x82\xfd\xf2\x08\t\x1a#\x04-\x1e\r+\x08\x01\x1a+\x04-\x1e\r+\x08\x01\x1a+\x15\x14\x05\x1e\r+\x00\t\x1a+\r\x0c\x05\x04\x05\x1e\r+\x18\x00\x00\xfcJ\xd0\x83\x01t\x12\x13\n\x1b\n\x0bJ\x18\x01\x1a\x0b\x02\x03\x02\x0b\x02\x03R\x0b\x02\x08\x19*\x0bR\x03\n\x13\x12\x11\n\x01\x1a\x0b2\x03\x12#\n!\x00\x18\x80\x00\xfcJ\xd0\x82\xff\xb4\x18\t*#\x0e\x15\x1e\x05$\x10\t*\x1b\x0c\x16\x05&\x04\x1b\x04\x10\x01"#\x0c%\x16\r\x04\x13\x0c\x08\t\x1a#\x0c\x05\x06\x1d\x1e\x05+\x19\x00\x00\xfcJ\xd0\x83\x06\xbc\x1b\x12#\x02C\x0c\x0b\x04\x05\x04\x05\x0e\x1b\x12\x1b\nC\x04\x0b\x04\r\x0e\r\x1b\x00\n\x13"K\x04\r\x1e#\n\x13"3\x14\x05\x06\x15\x06\x05\x19\x00\x00\xfcJ\xd0\x83\n?\n\x01\x03\x12\x0b\n\x03J+\x02\x13\x12\x03\n\x13j\x0b\x02+\x12\x03\x12\x03*\x11*\x0b\x02\x03\x02#\n\x03B\x08\x11\n\x0b\x02\x0b\x00\x02#\x19\x00\x00\xfcJ\xd0\x83\x11H\x0b\x1a\x11\x02\x03\x12\x0b"S"\x11\n\x13\x02\x03"+\x0c\x1b"\x01\x02\x01\n\x13\x1a#\x14\x03\x0c\x1b:\x01\x02\x13\x1a\x0b$\x0b\x04\x03\x0c\x0b\x19\x80\x00\xfcJ\xd0\x83\x04\xfa#\x12\x0b"3\x14\x06\x0f\x06\x15\x13\x00\x03\x12\x03*3\x04\r\x0e\x0f\x06\r\x13\x18*3\x04\x03\x04\x1e\x0f\x06\r\x13\x18*;\x0c\x05\x16\x0f\x06\x0c\x19\x80\x00\xfcJ\xd0\x83-g(\x01\x02\x0b*!\x02\x03\x14\x03"(\x01\x02\x0b*!\x02\x03\x14\x03"\x10\x11\n\x0b*\x11\x1a\x0c\x05*\x18\t\n\x0b*\x11\x12\x03\x0c\x03"\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')])
        msg = "Uplink data message failed to decode"
        result = msg_decoder._decodeMessage(rawdata)
        self.assertTrue(result, msg=msg)
        # TODO: test decoded message fields after refactor of Decoder parser
